{
  "info": {
    "name": "Todo API - Node.js & MongoDB",
    "description": "Complete REST API for Todo Management with User Authentication",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000/api",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('authToken', response.data.token);",
                  "    pm.test('Registration successful', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.data.token).to.exist;",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"Password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new user with name, email, and password"
          },
          "response": []
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('authToken', response.data.token);",
                  "    pm.test('Login successful', function () {",
                  "        pm.expect(response.success).to.be.true;",
                  "        pm.expect(response.data.token).to.exist;",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"Password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Login with email and password to get JWT token"
          },
          "response": []
        },
        {
          "name": "Get User Profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "profile"]
            },
            "description": "Get current user profile (requires authentication)"
          },
          "response": []
        }
      ],
      "description": "Authentication endpoints for user registration, login, and profile management"
    },
    {
      "name": "Todos",
      "item": [
        {
          "name": "Create Todo",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Learn Node.js\",\n  \"description\": \"Complete the comprehensive Node.js tutorial and build a REST API\",\n  \"completed\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/todos",
              "host": ["{{baseUrl}}"],
              "path": ["todos"]
            },
            "description": "Create a new todo item"
          },
          "response": []
        },
        {
          "name": "Get All Todos",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/todos",
              "host": ["{{baseUrl}}"],
              "path": ["todos"]
            },
            "description": "Get all todos for the authenticated user"
          },
          "response": []
        },
        {
          "name": "Get Todos with Pagination",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/todos?page=1&limit=5&sortBy=createdAt&sortOrder=desc",
              "host": ["{{baseUrl}}"],
              "path": ["todos"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "5"
                },
                {
                  "key": "sortBy",
                  "value": "createdAt"
                },
                {
                  "key": "sortOrder",
                  "value": "desc"
                }
              ]
            },
            "description": "Get todos with pagination, sorting, and filtering"
          },
          "response": []
        },
        {
          "name": "Get Completed Todos",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/todos?completed=true",
              "host": ["{{baseUrl}}"],
              "path": ["todos"],
              "query": [
                {
                  "key": "completed",
                  "value": "true"
                }
              ]
            },
            "description": "Get only completed todos"
          },
          "response": []
        },
        {
          "name": "Get Todo by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/todos/{{todoId}}",
              "host": ["{{baseUrl}}"],
              "path": ["todos", "{{todoId}}"]
            },
            "description": "Get a specific todo by its ID"
          },
          "response": []
        },
        {
          "name": "Update Todo",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Learn Node.js - Updated\",\n  \"description\": \"Complete the comprehensive Node.js tutorial, build a REST API, and deploy it\",\n  \"completed\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/todos/{{todoId}}",
              "host": ["{{baseUrl}}"],
              "path": ["todos", "{{todoId}}"]
            },
            "description": "Update an existing todo"
          },
          "response": []
        },
        {
          "name": "Delete Todo",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/todos/{{todoId}}",
              "host": ["{{baseUrl}}"],
              "path": ["todos", "{{todoId}}"]
            },
            "description": "Delete a todo by its ID"
          },
          "response": []
        },
        {
          "name": "Get Todo Statistics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/todos/stats",
              "host": ["{{baseUrl}}"],
              "path": ["todos", "stats"]
            },
            "description": "Get statistics about user's todos (total, completed, pending)"
          },
          "response": []
        }
      ],
      "description": "Todo management endpoints for CRUD operations"
    },
    {
      "name": "Error Testing",
      "item": [
        {
          "name": "Register with Invalid Email",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test User\",\n  \"email\": \"invalid-email\",\n  \"password\": \"Password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "Test validation error with invalid email format"
          },
          "response": []
        },
        {
          "name": "Login with Wrong Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"WrongPassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Test authentication error with wrong password"
          },
          "response": []
        },
        {
          "name": "Access Protected Route Without Token",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/todos",
              "host": ["{{baseUrl}}"],
              "path": ["todos"]
            },
            "description": "Test authorization error when accessing protected route without token"
          },
          "response": []
        },
        {
          "name": "Create Todo with Missing Title",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"description\": \"This todo is missing a title\",\n  \"completed\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/todos",
              "host": ["{{baseUrl}}"],
              "path": ["todos"]
            },
            "description": "Test validation error when creating todo without required title"
          },
          "response": []
        }
      ],
      "description": "Test various error scenarios and validation"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  }
}